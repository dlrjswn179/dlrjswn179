# -*- coding: utf-8 -*-
"""처음 배우는 딥러닝 챗봇_연습.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EgTYXctznQ4M-Pg1IXZP37dQ9BTY0Lf9

# 숫자
"""

type(0*8)

type(0/8)

type(1.0*5)

type(3/1)

type(3//1)

type(3%1)

"""#문자열"""

'"Nice to meet you", chatbot says'

"I'm programming now"

'Hello\nbro!!'

print('Hello\nbro!!')

'''Hello
bro!!'''

print('''Hello
bro!!''')

"""#리스트"""

list = [1,2]
list.append(1)
print(list)

list.insert(1,3)
print(list)

list.pop(1)

print(list)

del list[1]
print(list)

len(list)

"""#튜플"""

tuple = (1, 2)
tuple + (1,)

tuple + (2.00,)

"""#딕셔너리"""

user1 = {'name' : '홍길동', 'age' : 30, 'email' : 'hong@hanbit.co.kr'}

user1 = {'name' : "홍길동", 'age' : 30, 'email' : 'hong@hanbit.co.kr'}

user1 = {"name" : '홍길동', 'age' : 30, 'email' : "hong@hanbit.co.kr"}

user1

dict1 = {'a':'a'}
dict1

dict2 = {1:1}
dict2

"""#if 조건문"""

check = True
if check:
  print('-' * 13)
  print('check is true')
  print('-' * 13)
check = True
if check:
  print('-' * 13)
  print('check is true')
  print('-' * 13)

check = True
if check is True:
  print('-' * 13)
  print('check is true')
  print('-' * 13)

check = True
if check == True:
  print('-' * 13)
  print('check is true')
  print('-' * 13)

check = True
if check is False:
  print('-' * 13)
  print('check is true')
  print('-' * 13)

check = True
if check is True or False:
  print('-' * 13)
  print('check is true')
  print('-' * 13)

check = True
if check is True and False:
  print('-' * 13)
  print('check is true')
  print('-' * 13)

check = True
if check >= 0:
  print('-' * 13)
  print('check is true')
  print('-' * 13)
#?????????????????????????????????????????????????????????????????

check = True
if check <0:
  print('-' * 13)
  print('check is true')
  print('-' * 13)

check = True
if check ==0:
  print('-' * 13)
  print('check is true')
  print('-' * 13)

check = True
if check >0:
  print('-' * 13)
  print('check is true')
  print('-' * 13)

int(True)

int(False)
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

float(False)

score = 84
if score >= 90:
  print('Grade A')
elif score >= 80:
  print('Grade B')
elif score >= 70:
  print('Grade C')
else:
  print('Grade D')

score = 100
if score >= 90:
  print('Grade A')
elif score >= 80:
  print('Grade B')
elif score >= 70:
  print('Grade C')
else:
  print('Grade D')

"""#while 반복문"""

while True:
  print('input number : ')
  menu = int(input())
  if menu == 0: 
    break
  elif menu == 1:
    print('number one')
  elif menu == 99:
    continue
  elif menu == 2:
    print('number two')
  else:
    print('another number')

while True:
  print('input number : ')
  menu = int(input())
  if menu == 0:break
  elif menu == 1: print('number one')
  elif menu == 99: continue
  elif menu == 2:  print('number two')
  else:    print('another number')

"""#for 반복문"""

coord = [(0,0), (10,15), (20,25)]
for x,y in coord:
  print(x,y)

coord = [(0,0), (10,15), (20,25)]
for x in coord:
  print(x)

coord = [(0,0), (10,15), (20,25)]
for x,y in coord:
  print(x)

coord = [0, 10, 20]
for x in coord:
  print(x,333333333)

user = {'name' : 'Kei', 'age' : 35, 'nationality' : 'Korea'}
for k, v in user.items():
  print(k,v)

for k, v in user.items():
  print(k,':',v)

"""#사용자 정의 함수"""

def add(a,b):
  return a + b
a = 1
b = -2
add(a,b)

def print_user(a,b):
  print("name : %s" % user['name'])
  print("age : %d" % user['age'])
  print("score : %d" %score)
user = {'name' : 'Kei' , 'age' : 35 }
score = 85
print_user(user, score)

def print_user(a,b):
  print("name : %s" % user['name'])
  print("age : %d" % user['age'])
  print("score : %d" %score)
ran = {'name' : 'Kei' , 'age' : 35 }
dom = 85
print_user(ran, dom)

"""# 내장 함수"""

print('integer : {} / float : {} / string : {}'.format(10, 3.14, "hello"))

print('integer : {} , float : {} , string : {}'.format(10, 3.14, "hello"))

print('integer : {} / float : {} / string : {}'.format(10, 3.14, 'hello'))

print('integer : {0} / float : {1} / string : {2}'.format(10, 3.14, "hello"))

print('integer : {0} / float : {0} / string : {0}'.format(10, 3.14, "hello"))

numbers = [10, 11, 12, 13, 14]
for idx, value in enumerate(numbers):
  print('index:{}, value:{}'.format(idx, value))

enumerate(numbers)

print(enumerate(numbers))

x = enumerate(numbers)

x

str("hello".upper())

str("HELLO".lower())

'1'.lower()

'100'.lower()

'Hello'.lower()

'hELLO'.upper()

names =  ['Kei', 'Tonny', 'Grace', 'Jenny', 'Jaeyoo']
','.join(names)

names =  ['Kei', 'Tonny', 'Grace', 'Jenny', 'Jaeyoo']
''.join(names)

names_str = ','.join(names)
names_split = names_str.split(',')
names_split

names_str = ','.join(names)
names_split = names_str.split('J')
names_split

str = "I want to be a great programmer."
str.find("be")

str = "I want to be a great programmer."
str.find("")

str = "I want to be a great programmer."
str.find('  ')

str = " I want to be a great programmer. "
new_str = str.strip()
new_str

str = "I want to be a great programmer.           "
new_str = str.strip()
new_str

del(list)
#map() 함수와 lambda 함수 사용
numbers = range(1,5)
square_list = list(map(lambda x : x**2, numbers))
print(square_list)

#filter() 함수와 lambda 함수 사용
numbers = range(1,21)
even_list = list(filter(lambda n:n%2==0, numbers))
print(even_list)

#filter() 함수와 lambda 함수 사용
numbers = range(1,21)
even_list = list(filter(lambda n:n%22==0, numbers))
print(even_list)

#map() 함수와 lambda 함수 사용
numbers = range(1,5)
square_list = list(map(lambda x : x**2, numbers))
print(square_list)

#map() 함수와 lambda 함수 사용
numbers = range(1,5)
square_list = list(map(lambda numbers : numbers**2, numbers))
print(square_list)

"""# 외장 함수"""

import pickle
f = open('setting.txt', 'wb') # wb: 바이너리 쓰기
setting = [{'title' : 'python program'}, {'author' : 'Kei'}] 
pickle.dump(setting, f)
f.close()

f = open('setting.txt', 'rb')
setting = pickle.load(f)
f.close()
print(setting)

import pickle
f = open('setting.txt', 'wb') # wb: 바이너리 쓰기
setting = [{'title' : 'python program'}, {'author' : 'Kei'}] 
pickle.dump(setting, f)
f.close()

f = open('setting.txt', 'rb')
setting = pickle.load(f)
f.close()
print(setting)

import time
lt = time.localtime(time.time())
time.strftime('%Y/%m/%d %H:%M:%S', lt)

import time
time.strftime('%Y/%m/%d %H:%M:%S', time.localtime(time.time()))

"""# 클래스"""

class Chatbot:
  def sayHello(self):
    print("say hello")
  def sayMyName(self):
    print("My name is Kbot :D")
chatbot = Chatbot()  # 인스턴스를 생성함.
chatbot.sayHello()
chatbot.sayMyName()

class Chatbot:
  def sayHello(f):
    print("say hello")
  def sayMyName(x):
    print("My name is Kbot :D")
chatbot = Chatbot()  # 인스턴스를 생성함.
chatbot.sayHello()
chatbot.sayMyName()

#?????????????????????????????????????????????????????????? self를 안썼는데.

"""# 생성자 및 소멸자"""

class SimpleObj:
  def __init__(self):
    print('call __init__()')
  def __del__(self):
    print('call__del__()')
obj = SimpleObj()
print('obj instance is alive...')
del obj

class SimpleObj:
  def __init__(k):
    print('call __init__()')
  def __del__(k):
    print('call__del__()')
obj = SimpleObj()
print('obj instance is alive...')
del obj
#?????????????????????????????????????????????????????????? self를 안썼는데.

"""# 메서드와 인스턴스 변수"""

class Calc:
  def __init__(self, init_value):  #입력값이 self가 아닌 init_value에 저장됨. self는 인스턴스 내부에서 자신을 참조하기 위해 사용하는 용도이기 때문.
    self.value = init_value  #인스턴스 변수로 사용하기 위해서는 self 키워드를 사용해야 함.
  def add(self, n): 
    return self.value + n
  def sub(self, n):
    return self.value - n
  def mul(self, n):
    return self.value * n
  def div(self, n):
    return self.value / n
cal = Calc(100)
print("value = {0}".format(cal.value))
a = cal.add(100)
b = cal.sub(50)
c = cal.mul(2)
d = cal.div(2)
print("a={0}, b={1}, c={2}, d={3}".format(a, b, c, d))

class Calc:
  def __init__(f, init_value):  #입력값이 self가 아닌 init_value에 저장됨. self는 인스턴스 내부에서 자신을 참조하기 위해 사용하는 용도이기 때문.
    f.value = init_value  #인스턴스 변수로 사용하기 위해서는 self 키워드를 사용해야 함.
  def add(f, n): 
    return f.value + n
  def sub(f, n):
    return f.value - n
  def mul(f, n):
    return f.value * n
  def div(f, n):
    return f.value / n
cal = Calc(100)
print("value = {0}".format(cal.value))
a = cal.add(100)
b = cal.sub(50)
c = cal.mul(2)
d = cal.div(2)
print("a={0}, b={1}, c={2}, d={3}".format(a, b, c, d))

#?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!: 파이썬에서는 다른 문자가 self와 같은 역할을 함.

